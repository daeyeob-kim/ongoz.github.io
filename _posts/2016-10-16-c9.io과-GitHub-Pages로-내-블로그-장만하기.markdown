# c9.io과 GitHub Pages로 내 블로그 장만하기


작성한 글을 올리게 된 이유와 여러 비교는 나중에 하도록 하고, 이 포스팅에서는 GitHub pages를 이용한 블로그 장만기를 적어볼까 합니다.

GitHub을 이용한 블로그 개발은 이전부터 계속 되어왔는데요, GitHub pages를 통해 훨씬 빠르고 쉽게 Jekyll 기반의 블로그를 생성할 수 있습니다.

### 알고 시작해야 하는 것들

HTML에 대한 기본 문법

Git/GitHub 사용법

### 미리 알아두면 좋은 것들
jekyll에 대한 이해(https://jekyllrb-ko.github.io/)

c9.io 사용법

```
c9.io(https://c9.io)는 무료로 웹 개발 환경을 제공해주는 웹 IDE입니다.
이 포스팅에서는 로컬에 포스팅 환경을 구축하지 않고 웹 IDE를 통해 글을 업로드 할 수 있는 환경을 위해 선택했습니다. (심지어 빠르게 구축할 수 있다는 장점도 있습니다.)
구름(http://goorm.io)도 비슷한 기능을 제공해줍니다.
```
![c9.io](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.29.53.png)

### 할 일 요약
1. https://c9.io IDE에 무료 블로그 개발 환경을 만듭니다.
2. GitHub Pages 생성을 위해 GitHub 저장소를 만듭니다.
3. c9.io Workspace에 적당한 블로그 템플릿을 복사하고 이름을 넣어줍니다.
4. c9.io에 만들어둔 블로그를 확인하고, 콘솔창에서 GitHub 저장소로 push합니다.
5. 완성!


## 가입하기
이번 포스팅에서 필요한 계정은 2가지입니다.

1. 로컬 환경에서 GitHub 저장소에 push 하기 위한 `c9.io 계정`
2. GitHub 저장소를 생성하기 위한 `GitHub 계정`


```
참고
이전에는 c9.io에 결제정보 없이도 가입이 가능했지만, 요즘에는 가입을 위해 카드정보를 받고있더라구요.
가입전에 카드를 준비해두시면 의자에서 일어나는 수고를 줄일 수 있습니다.(AWS 가입절차를 생각하시면 됩니다.)
```

## c9.io에 내 블로그 '먼저' 만들기

먼저 블로그를 생성해야 웹에도 올릴 수 있으니 블로그를 먼저 생성해볼까요?
c9.io에 대한 설명은 조금 줄이고, 필요한 내용 위주로 설명하겠습니다.

#### Workspace 생성

c9.io(https://c9.io)에 접속 후 Dashboard에 블로그용 Workspace를 생성합니다. (어차피 GitHub에서는 공개로 설정할테니, 굳이 private workspace를 생성하실 필요는 없습니다.)

![c9 dashboard](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.50.45.png)
템플릿은 HTML5로 선택합니다. jekyll 때문에 루비를 선택해봤더니 레일즈 보일러플레이트가 기본 설정되어있어서 설정을 지우는데 시간이 더 걸리더라구요. jekyll에 필요한 파일은 콘솔에서 설치하도록 하겠습니다.

Workspace가 생성되면 휑한 화면을 볼 수 있는데요, 여기에 원하는 jekyll Theme를 복사하면 됩니다. 테마는 http://jekyllthemes.org/ 에서 마음에 드는걸 잡아오시면 됩니다. 물론 테마마다 사용자 설정이나 DISQUS(포스팅 하단 댓글 영역을 생성해주는 서비스) 기본 탑재여부등이 다릅니다. 없는 기능은 새로 구현해야하는 경우도 있으니 각 기능을 데모 페이지에서 확인해보시고 선택하세요.

저는 지금 블로그에서 사용중인 미디엄 스타일의 테마를 받아보겠습니다.(http://jekyllthemes.org/themes/mediator/)

![c9 file](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.20.26.png)
이후에는 받은 파일의 압축을 그대로 c9 IDE 파일 트리에 Drag & Drop 하면 필요한 파일은 전부 받은겁니다.

```
Readme.md 파일은 꼭 덮어씌우지 않아도 상관없습니다.
```

####jekyll 세팅
이제 jekyll를 세팅해보겠습니다. 지금 상태는 마치 컴파일하지 않은 소스와 같아서, 일반적인 웹서버에서는 정상적으로 노출되지 않습니다.
때문에 jekyll 명령어를 통해 필요한 정보들을 하나의 static page로 만들어야합니다.

```
다음과 같은 두 문장을
데이터   /  (이름정보 : 김대엽, 나이정보 : 27)
레이아웃  /  "[이름정보],[나이정보]의 블로그입니다."

하나의 static 문장으로
=> "김대엽(27)의 블로그입니다."

만드는 과정이라고 생각하면 편리할 것 같네요.
```


![c9 bash](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.07.18.png)
이 작업은 c9 IDE 하단의 bash shell을 통해 진행하게 되는데요, workspace를 생성할 때 기본적인 세팅은 완료되어있는 상태이기 때문에 몇가지 명령어만 입력하면 작업이 완료됩니다.

아래와 같은 탭에
>gem install jekyll bundler

를 입력합니다. jekyll에 필요한 설치가 끝나면 다시
>bundle install

를 입력합니다. 이 명령어를 통해 `mediator` 템플릿에서 필요한 파일을 받을 수 있습니다. 해당 명령어는 테마마다 다를 수 있으니 해당 테마의 Readme.md 파일을 꼭 확인해보시기 바랍니다.

여기까지 완료되면, 새로운 블로그의 static page를 만들어 낼 준비가 완료되었습니다.

#### 파일구조
잠시 파일구조를 보고 넘어가려고 하는데요, jekyll기반의 블로그에 포스팅을 위한 가장 기초적인 내용입니다.
몇가지 중요한 파일과 폴더에 대한 설명을 붙이자면

`_config.yml` : 블로그의 모든 설정을 담당합니다. 잘 만들어진 템플릿의 경우, 이 파일의 내용을 수정하는 것으로 블로그의 모든 정보를 변경할 수 도 있습니다.

`_posts` 폴더 : 포스팅이 저장되는 공간입니다. 이 폴더에 글을 넣으면 자동으로 포스팅을 인식합니다. 각 포스팅에는 지켜야하는 제목 양식이 있는데요, 기존의 포스팅 제목을 확인해보시면 쉽게 따라하실 수 있습니다.

`_site` 폴더 : jekyll을 통해 만들어지는 static 결과물이 출력되는 폴더입니다.(기본 설정) 처음 템플릿을 받으면 해당 폴더가 없는 경우가 있는데요, 명령어를 통해 static page를 만들어 내면 생성되게 됩니다. 중요한 사실은, `_site` 폴더의 내용물을 수정하는건 의미가 없다는겁니다. 단순히 static page 결과물이 저장되는 폴더이기 때문에, 다음 페이지 생성때 덮어 씌워지거든요. 페이지 내용을 수정할 곳이 있다면, 설정파일이나 다른 폴더의 레이아웃을 수정해야합니다.

```
https://jekyllrb.com/docs/structure/에서 더 자세한 내용을 보실 수 있습니다.
```


#### 블로그 내용 수정
파일구조에서 이야기 했듯, 좋은 템플릿은 대다수의 내용을 `_config.yml` 파일에 저장해두고 사용합니다.
파일을 열어보시면, 친절한 #주석과 함께 넣어야 할 정보를 확인하실 수 있습니다. 해당 내용을 입력해 블로그의 내용을 채우면 됩니다.

#### Static Page 생성 & 서버 구동
블로그 내용을 수정하다보면, 맞게 수정이 된 것인지 확인하고 싶어집니다. 이제 새단장한 블로그를 만나볼까요?

c9 IDE를 사용하고 있기 때문에, `_config.yml`파일을 수정할 필요가 있습니다. jekyll 튜토리얼을 참고해서 작업하시다보면, jekyll에서 기본실행되는 웹서버의 기본 포트가 4000번임을 알 수 있는데요, c9(무료계정)에서는 정해진 포트 이외에는 접근을 허용하지 않아서, 강제로 포트를 변경해주어야합니다.

간단하게 말해서 `_config.yml`파일에 

>port: 8080

을 추가해주면 됩니다. 

![port setting](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.36.45.png)
저는 제 템플릿에 있는 #Build settings 하단에 추가했습니다. 참고로 포트를 수정해도 GitHub Pages에 업로드하는데는 차이가 없습니다.

그리고 이제 서버를 실행하면 되는데요,

>bundle exec jekyll serve

를 입력하면, `_site` 폴더가 생성되면서 서버가 실행됩니다.
![_site](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.39.45.png)


서버가 실행되면 콘솔 옆에 주소가 하나 뜨는데요, 이 주소를 통해 (일반적으로 `워크스페이스이름-유저명-c9users.io`) c9.io 서버에 생성된 블로그를 볼 수 있습니다.
![server start](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.39.29.png)

서버를 재시작하는법은 ctrl-c를 누르고, 다시 위 명령어 
>bundle exec jekyll serve

를 입력하면 됩니다. 기본적으로 파일이 변경될때마다 `_site`폴더의 내용을 재생성해주긴 하지만, 변경이 되지 않는 경우 재시작이 가장 빠른 방법이더라구요.

## GitHub에 둥지틀기

사실 c9.io에 블로그를 올리면 제공되는 개인 주소를 통해 블로그를 운영할 수 있습니다.
그러나 c9.io 무료 계정으로는 웹 IDE를 켜 둔 상태에서만 서버가 켜져있기 때문에, (컴퓨터를 꺼버리면 외부에서 접근할 수 없는것과 같습니다.)
언제든 접속이 되는 환경을 구축하기 위해선 해당 소스를 GitHub으로 옮겨주는것이죠.

#### GitHub 저장소 생성
GitHub에 로그인 후 새로운 저장소를 생성합니다.

![github repo](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.47.14.png)
저장소를 생성할 때 GitHub Pages를 위한 규칙이 있는데요,
저장소 이름을 `GitHub아이디.github.io`로 생성해야합니다.

```
아이디가 ongoz 일 경우,
ongoz.github.io 입니다.
```


![github need commit](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.49.49.png)
저장소를 처음 생성하면, 저장소에 내용이 없기 때문에 첫 commit을 위한 설명이 뜨게 됩니다.
이 중에서 상단의 해당 저장소 주소를 저장해두세요. Https나 SSH 어느쪽이든 상관없습니다. 

```
이 예시에서 사용되는 GitHub ID는 `daeyeobi`입니다.
(https://github.com/daeyeobi/daeyeobi.github.io.git)
```

#### 파일 커밋

저장소의 주소를 알았으니 이제 파일을 올려야겠죠. 다시 c9 IDE의 bash shell에서 명령어를 실행합니다. 혹시 아직 서버가 실행되는 중이라면, 잠시 ctrl-c를 눌러 종료시켜주세요.

![bash loaction](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.58.00.png)
먼저 명령어를 치는 옆 현재 주소를 확인해야합니다.
지금은 `c9아이디:~/workspace $`로 시작하는데요,
여기서 `ls`명령어를 통해 생성해둔 파일들이 보인다면 git 명령어를 입력할 준비가 되었습니다.
역시 처음 c9 workspace를 생성할 때 git이 설치된 상태이기 때문에, 별도의 설정을 하지 않아도 됩니다.

만일 다른 폴더에 있다면, `cd [주소]`/`cd ..`을 통해 해당 주소를 찾아주시면 됩니다.

git 저장소를 생성합니다
>git init

.git 폴더가 정상적으로 생성된것이 확인되면, 전체 파일을 커밋 대상으로 올립니다
>git add .

이후 커밋이름을 설정해줍니다.
>git commit -m 'init commit'

이제 커밋을 저장소에 푸시 해줘야하는데요,
>git remote add origin [위에서 저장한 저장소 주소]

>예시) git remote add origin https://github.com/daeyeobi/daeyeobi.github.io.git

리모트 설정 후
>git push


푸시를 하면 GitHub 아이디와 비밀번호를 요구합니다.
인증이 완료되면 다음과 같은 화면을 볼 수 있습니다.
![git push](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.07.02.png)
그리고 다시 저장소페이지 https://github.com/GitHub아이디/GitHub아이디.github.io 를 확인해보시면

푸시한 파일이 올라가있는것을 확인하실 수 있습니다!
![git push](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.08.27.png)

그리고 https://daeyeobi.github.io 역시 접근이 가능합니다. 

```
GitHub Pages 내부에서 파일 생성하는 시간이 조금 걸릴 수 있습니다. 마찬가지로 새로운 커밋을 한 뒤에 반영되는 시간도 조금 걸립니다.
```

![git push](https://ongoz.github.io/assets/article_images/2016-10-16-c9.io%EA%B3%BC-GitHub-Pages%EB%A1%9C-%EB%82%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202016-10-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2010.11.16.png)

첫 커밋 이후, 블로그에 수정사항이 있거나 포스팅을 추가할 경우엔 위에서 했던 커밋 방법을 동일하게 실행하면 됩니다.


>여기까지가 c9.io과 GitHub Pages를 이용한 블로그 세팅 과정입니다.
제가 이 블로그를 세팅하며 진행했던 내용을 토대로 다시 세팅하며 작성해보았는데요,
포스팅 가이드는 조금 더 익숙해진 뒤에 업로드 하도록 하겠습니다!
